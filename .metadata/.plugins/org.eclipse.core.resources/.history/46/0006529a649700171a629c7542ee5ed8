/*
 * Main.cpp
 *
 *  Created on: 07/09/2017
 *      Author: Mariana
 */

#include <stdio.h>
#include <cstdlib>
#include <string.h>
#include <iostream>
#include <map>

using namespace std;

bool buscar(int principio, string * lenguaje, int * cardenalidad, int longitud, string w){
	for(int i = 0; i < longitud; i++){
			if(lenguaje[i] == w.substr(principio, cardenalidad[i])){
				cout<<"Si pertenece "<<lenguaje[i]<<" en la posicion "<< principio << ","<<cardenalidad[i]<<endl;
				return buscar(cardenalidad[i]+principio, lenguaje, cardenalidad, longitud, w);
			}
		}
	return false;
}

int main(){
	string sigma, l, w;

	//obtener las entradas

	getline(cin, sigma);
	getline(cin, l);
	getline(cin, w);

	//revisar si lenguaje y cadena pertenece al alfabeto
	//checar permutaciones de la cadena

	//crear dictionary
	//map<int, map<string, int> > lenguaje;
	//map<string, int> lenguaje;

	char * l_separado = new char[l.length()+1];
	strcpy (l_separado, l.c_str());
	l_separado = strtok(l_separado, ",");

	string * lenguaje = new string[l.length() + 1];
	int * cardenalidad = new int[l.length() + 1];


	int posicion = 0;
	while(l_separado != NULL){
		lenguaje[posicion] = l_separado;
		cardenalidad[posicion] = strlen(l_separado);
		l_separado = strtok(NULL, ",");
		cout<<lenguaje[posicion]<<" "<<cardenalidad[posicion]<<endl;
		posicion++;
	}
	int longitud = posicion;
	//DICCIONARIO GUARDA POR POSICIONES EMPEZANDO EN 1
	/*int posicion = 1;
	while(l_separado != NULL){
		//printf("%s\n", l_separado);
		lenguaje[posicion][l_separado] = strlen(l_separado);
		lenguaje[l_separado] = strlen(l_separado);
		//printf("[%d][%s] = %d\n", posicion, l_separado, strlen(l_separado));
		//posicion++;
		l_separado = strtok(NULL, ",");
	}

	//árbol
	// recorrer el diccionario
	map<int, map<string, int > >const_iterator ;
	map<string, int>const_iterator;
	for(const_iterator it = lenguaje.begin(); const_iterator it != lenguaje.end(); const_iterator it++){
		//tomamos la longitud de la cadena
		//comparamos con un substring en esa posición
		//si es igual continuamos con la siguiente posición del diccionario y la siguiene subcadena
		//si no continuamos con la siguiente cadena del diccionario
		//si no la encuentra "la cadena no pertenece"
	}*/
	cout<<longitud<<endl;
	bool pertenece = buscar(0, lenguaje, cardenalidad, longitud, w);

	int principio = 0;
	for(int i = 0; i < longitud; i++){
		if(lenguaje[i] == w.substr(principio, cardenalidad[i])){
			cout<<"Si pertenece "<<lenguaje[i]<<" en la posicion "<< principio << ","<<cardenalidad[i]<<endl;
		}
	}
	return 0;
}




