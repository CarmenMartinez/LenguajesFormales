/*
 * Main.cpp
 *	Práctica 1
 *  Fecha de creación: 07/09/2017
 *  Integrantes:
 *  Mariana Sierra Vega 702782
 *  Julián De Jesús López López
 *  María del Carmen Martínez Nuño 703358
 *  Pablo Menchaca Noriega 708157
 *
 *
 */

#include <stdio.h>
#include <cstdlib>
#include <string.h>
#include <iostream>
#include <map>

using namespace std;

bool buscar(int principio, string * lenguaje, int * cardenalidad, int longitud, string w){
	bool pertenece = false;
	for(int i = 0; i < longitud; i++){
			if(lenguaje[i] == w.substr(principio, cardenalidad[i])){
				cout<<lenguaje[i]<<" = "<<w.substr(principio, cardenalidad[i])<<endl;
				cout<<"Si pertenece "<<lenguaje[i]<<" en la posicion "<< principio << ","<<cardenalidad[i]<<endl;
				pertenece = true;
				if((unsigned int)(cardenalidad[i]+principio) == w.length()){
					return pertenece;
				}
				if(buscar(cardenalidad[i]+principio, lenguaje, cardenalidad, longitud, w)){
					return buscar(cardenalidad[i]+principio, lenguaje, cardenalidad, longitud, w);
				}
			}
			else if(i == (longitud - 1)){
				return false;
			}
		}

	return pertenece;
}

int main(){
	string sigma, l, w;

	//obtener las entradas
	cout<<"Ingresa el alfabeto separado por espacios: "<<endl<<"Ejemplo 'a b c'"<<endl;
	cout<<"\u03A3:";
	getline(cin, sigma);
	bool flag = false;
	do{
		getline(cin, l);
		for(int i = 0; i < l.length(); i++){
			if(sigma.find(l[i]) == string::npos && l[i] != ','){
				flag = true;
			}
		}
	}while(flag);
	getline(cin, w);

	//revisar si lenguaje y cadena pertenece al alfabeto
	//checar permutaciones de la cadena

	//crear dictionary
	//map<int, map<string, int> > lenguaje;
	//map<string, int> lenguaje;

	char * l_separado = new char[l.length()+1];
	strcpy (l_separado, l.c_str());
	l_separado = strtok(l_separado, ",");

	string * lenguaje = new string[l.length() + 1];
	int * cardenalidad = new int[l.length() + 1];


	int posicion = 0;
	while(l_separado != NULL){
		lenguaje[posicion] = l_separado;
		cardenalidad[posicion] = strlen(l_separado);
		l_separado = strtok(NULL, ",");
		cout<<lenguaje[posicion]<<" "<<cardenalidad[posicion]<<endl;
		posicion++;
	}
	int longitud = posicion;

	cout<<longitud<<endl;
	bool pertenece = buscar(0, lenguaje, cardenalidad, longitud, w);
	if(pertenece)
		cout<<"Pertenece"<<endl;
	else
		cout<<"No pertenece"<<endl;

	return 0;
}




